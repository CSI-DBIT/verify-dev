// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Organization Model
model Organization {
  orgId             String          @id @default(uuid())
  orgName           String
  description       String
  email             String          @unique
  emailVerified     Boolean         @default(false)
  password          String
  type              String          @default("FREE_FOR_ALL") // Access type
  category          String // Business type/category
  logo              String?
  address           String?
  phoneNo           String?
  alternatePhoneNo  String?
  startDate         DateTime
  eventCategories   EventCategory[]
  socialUrls        SocialUrl[]     @relation("OrganizationSocialUrls")
  members           Membership[]
  events            Event[]
  notifications     Notification[]  @relation("OrganizationNotifications")
  chatRoomId        String          @unique
  chatRoom          ChatRoom?
  reputationCredits Int             @default(1000)
  refreshToken      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  chatRoomMessages Message[] @relation("OrganizationMessages")
}

// Member Model
model Member {
  memberId         String   @id @default(uuid())
  memberName       String
  about            String
  email            String   @unique
  emailVerified    Boolean  @default(false)
  password         String
  gender           String
  phoneNo          String?
  alternatePhoneNo String?
  memberImg        String?
  memberStatus     String?
  birthdate         DateTime
  country          String?
  city             String?
  occupation       String?
  companyName      String?

  loyaltyCredits Int @default(1000)

  feedbackCount   Int            @default(0)
  commentsCount   Int            @default(0)
  favouriteEvents Event[]
  memberships     Membership[]
  socialUrls      SocialUrl[]    @relation("MemberSocialUrls")
  notifications   Notification[] @relation("MemberNotifications")
  certificates    Certificate[]
  participations  Participant[]
  refreshToken    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  messages Message[] @relation("MemberMessages")
}

model ChatRoom {
  chatRoomId String    @id @default(uuid())
  messages   Message[]

  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [orgId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Message Model
model Message {
  messageId      String        @id @default(uuid())
  content        String // Content of the message (e.g., poll question, text, etc.)
  organizationId String?
  organization   Organization? @relation("OrganizationMessages", fields: [organizationId], references: [orgId])
  memberId       String?
  member         Member?       @relation("MemberMessages", fields: [memberId], references: [memberId])

  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])

  messageType String // Type of the message (e.g., REGULAR, RATE, VOTE(upvote/downvote)) 
  rating      Int? // Rating score (if the message is a rating)
  upvotes     Int? // Number of upvotes (if the message is an upvote)
  downvotes   Int? // Number of downvotes (if the message is a downvote)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// EventCategory Model
model EventCategory {
  categoryId     String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// SocialUrl Model
model SocialUrl {
  urlId          String        @id @default(uuid())
  platform       String
  url            String
  organizationId String?
  organization   Organization? @relation("OrganizationSocialUrls", fields: [organizationId], references: [orgId])
  memberId       String?
  member         Member?       @relation("MemberSocialUrls", fields: [memberId], references: [memberId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Membership Model
model Membership {
  id          String   @id @default(uuid())
  startDate   DateTime @default(now())
  status      String   @default("ACTIVE") //ACTIVE, INACTIVE, EXPIRED
  role        String   @default("MEMBER") // MEMBER , CORE
  isFavourite Boolean  @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [memberId])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// Event Model
model Event {
  eventId        String        @id @default(uuid())
  eventName      String
  description    String?
  eventPoster    String?
  type           String // MEMBER_ONLY, OPEN_TO_ALL, POINTS_BASED
  category       String
  pointsRequired Int? // Points needed to attend (for POINTS_BASED events)
  eventDate      DateTime
  status         String        @default("SCHEDULED") // SCHEDULED , ONGOING, COMPLETED
  attachmentUrl  String?
  reportUrl      String?
  participants   Participant[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  favouredByMembers Member[]
  EventFeedbacks    EventFeedbacks[]

  @@index([eventDate])
  @@index([organizationId])
}

model EventFeedbacks {
  id            String      @id @default(uuid())
  rating        Int // 1-5 rating or any scale
  feedback      String? // Text feedback from participant
  eventId       String
  event         Event       @relation(fields: [eventId], references: [eventId])
  participantId String      @unique
  participant   Participant @relation(fields: [participantId], references: [participantId])
}

// Participant Model
model Participant {
  participantId String    @id @default(uuid())
  name          String
  email         String
  gender        String?
  phoneNo       String?
  address       String?
  registeredAt  DateTime?
  status        String    @default("REGISTERED") // REGISTERED, ATTENDED
  feedback      String?
  type          String //MEMBER, NONMEMBER, OUTSIDER
  isMember      Boolean

  member   Member? @relation(fields: [memberId], references: [memberId])
  memberId String?

  eventId String
  event   Event  @relation(fields: [eventId], references: [eventId])

  certificate    Certificate?
  EventFeedbacks EventFeedbacks?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([email, eventId])
  @@index([eventId])
  @@index([email])
}

// Certificate Model
model Certificate {
  certificateId   String    @id @default(uuid())
  certificateCode String    @unique
  certificateUrl  String?
  issuedAt        DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Certificate linked to a participant (one-to-one relationship)
  participantId String?      @unique
  participant   Participant? @relation(fields: [participantId], references: [participantId])

  // Certificate linked to a member (one-to-one relationship)
  memberId String?
  member   Member? @relation(fields: [memberId], references: [memberId])
}

// Notification Model
model Notification {
  notificationId String  @id @default(uuid())
  type           String // e.g., "JOIN_REQUEST", "MEMBER_JOINED", "WELCOME"
  message        String
  isRead         Boolean @default(false) // To track if the notification is read or unread

  // Optional relation fields for notification context
  memberId String?
  member   Member? @relation("MemberNotifications", fields: [memberId], references: [memberId])

  organizationId String?
  organization   Organization? @relation("OrganizationNotifications", fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
