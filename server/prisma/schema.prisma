generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator prismabox { 
  provider = "prismabox"
  typeboxImportDependencyName = "elysia"
  typeboxImportVariableName = "t"
  inputModel = true
  output   = "../generated/prismabox"
} 

//
// Enums
//
enum OrgType {
  FREE_FOR_ALL
  PRIVATE
  INVITE_ONLY
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum MembershipRole {
  MEMBER
  CORE
}

enum EventType {
  MEMBER_ONLY
  OPEN_TO_ALL
  POINTS_BASED
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
}

enum ParticipantStatus {
  REGISTERED
  ATTENDED
}

enum ParticipantType {
  MEMBER
  NONMEMBER
  OUTSIDER
}

enum MessageType {
  REGULAR
  RATE
  VOTE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum NotificationType {
  JOIN_REQUEST
  MEMBER_JOINED
  WELCOME
}

//
// Models
//
model Organization {
  orgId             String          @id @default(uuid())
  orgName           String
  description       String?
  email             String          @unique
  emailVerified     Boolean         @default(false)
  password          String
  type              OrgType         @default(FREE_FOR_ALL)
  category          String
  logo              String?
  address           String?
  phoneNo           String?
  startDate         DateTime
  reputationCredits Int             @default(1000)

  // Relations
  eventCategories   EventCategory[]
  socialUrls        SocialUrl[]     @relation("OrganizationSocialUrls")
  members           Membership[]
  events            Event[]
  notifications     Notification[]  @relation("OrganizationNotifications")
  chatRoom          ChatRoom?
  chatRoomMessages  Message[]       @relation("OrganizationMessages")
  refreshTokens     RefreshToken[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@index([email])
}

model Member {
  memberId         String   @id @default(uuid())
  memberName       String
  about            String?
  email            String   @unique
  emailVerified    Boolean  @default(false)
  password         String
  gender           Gender?
  phoneNo          String?
  memberImg        String?
  birthdate        DateTime?
  country          String?

  loyaltyCredits   Int       @default(1000)
  feedbackCount    Int       @default(0)
  commentsCount    Int       @default(0)

  // Relations
  favouriteEvents  Event[]   @relation("FavouriteEvents")
  memberships      Membership[]
  socialUrls       SocialUrl[]    @relation("MemberSocialUrls")
  notifications    Notification[] @relation("MemberNotifications")
  certificates     Certificate[]
  participations   Participant[]
  messages         Message[]      @relation("MemberMessages")
  refreshTokens    RefreshToken[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
}

model ChatRoom {
  chatRoomId     String       @id @default(uuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [orgId])
  messages       Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  messageId      String        @id @default(uuid())
  content        String
  messageType    MessageType
  rating         Int? // only for RATE
  upvotes        Int? // only for VOTE
  downvotes      Int? // only for VOTE

  organizationId String?
  organization   Organization? @relation("OrganizationMessages", fields: [organizationId], references: [orgId])
  memberId       String?
  member         Member?       @relation("MemberMessages", fields: [memberId], references: [memberId])
  chatRoomId     String
  chatRoom       ChatRoom      @relation(fields: [chatRoomId], references: [chatRoomId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventCategory {
  categoryId     String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@unique([name, organizationId, isDeleted])
}

model SocialUrl {
  urlId          String        @id @default(uuid())
  platform       String
  url            String
  organizationId String?
  organization   Organization? @relation("OrganizationSocialUrls", fields: [organizationId], references: [orgId])
  memberId       String?
  member         Member?       @relation("MemberSocialUrls", fields: [memberId], references: [memberId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@index([platform, url, organizationId])
  @@index([platform, url, memberId])
}

model Membership {
  id          String            @id @default(uuid())
  startDate   DateTime          @default(now())
  status      MembershipStatus  @default(ACTIVE)
  role        MembershipRole    @default(MEMBER)
  isFavourite Boolean           @default(false)

  memberId String
  member   Member       @relation(fields: [memberId], references: [memberId])

  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@unique([memberId, organizationId, isDeleted])
  @@index([organizationId])
  @@index([memberId])
}

model Event {
  eventId        String        @id @default(uuid())
  eventName      String
  description    String?
  eventPoster    String?
  type           EventType
  category       String
  pointsRequired Int?
  eventDate      DateTime
  status         EventStatus   @default(SCHEDULED)
  attachmentUrl  String?
  reportUrl      String?

  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [orgId])
  participants   Participant[]
  favouredByMembers Member[]   @relation("FavouriteEvents")
  feedbacks      EventFeedbacks[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@unique([eventName, organizationId, isDeleted])
  @@index([eventDate])
  @@index([organizationId])
  @@index([status])
}

model EventFeedbacks {
  id            String      @id @default(uuid())
  rating        Int
  feedback      String?
  eventId       String
  event         Event       @relation(fields: [eventId], references: [eventId])
  participantId String      @unique
  participant   Participant @relation(fields: [participantId], references: [participantId])
}

model Participant {
  participantId String     @id @default(uuid())
  name          String
  email         String
  gender        Gender?
  phoneNo       String?
  address       String?
  registeredAt  DateTime?
  status        ParticipantStatus @default(REGISTERED)
  type          ParticipantType
  isMember      Boolean

  memberId String?
  member   Member?  @relation(fields: [memberId], references: [memberId])

  eventId String
  event   Event     @relation(fields: [eventId], references: [eventId])

  certificate Certificate?
  feedback    EventFeedbacks?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@unique([email, eventId, isDeleted])
  @@index([eventId])
  @@index([email])
}

model Certificate {
  certificateId   String    @id @default(uuid())
  certificateCode String    @unique
  certificateUrl  String?
  issuedAt        DateTime?

  participantId String?      @unique
  participant   Participant? @relation(fields: [participantId], references: [participantId])
  memberId String?
  member   Member?       @relation(fields: [memberId], references: [memberId])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@index([issuedAt])
}

model Notification {
  notificationId String           @id @default(uuid())
  type           NotificationType
  message        String
  isRead         Boolean          @default(false)

  memberId       String?
  member         Member?          @relation("MemberNotifications", fields: [memberId], references: [memberId])

  organizationId String?
  organization   Organization?    @relation("OrganizationNotifications", fields: [organizationId], references: [orgId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  @@index([memberId])
  @@index([organizationId])
  @@index([isRead])
}

//
// NEW RefreshToken model
//
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  memberId       String? @unique
  member         Member?       @relation(fields: [memberId], references: [memberId])

  organizationId String? @unique
  organization   Organization? @relation(fields: [organizationId], references: [orgId])

  @@index([memberId])
  @@index([organizationId])
  @@index([expiresAt])
}
